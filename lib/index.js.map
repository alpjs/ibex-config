{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;kBAwDwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArDxB,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACvB,WAAO,MAAS,cAAT,EACF,IADE,CACG;eAAO,IAAI,IAAJ;KAAP,CADH,CAEF,KAFE,CAEI;eAAM;KAAN,CAFX,CADuB;CAA3B;;;;;;;;;AAWA,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,QAAI,uBAAa,GAAb,CAAiB,IAAjB,CAAJ,EAA4B;AACxB,eAAO,uBAAa,GAAb,CAAiB,IAAjB,CAAP,CADwB;KAA5B;AAGA,WAAO,YAAY,IAAZ,CAAP,CAJqB;CAAzB;;;;;;;;;AAYA,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AACxB,QAAI,uBAAa,GAAb,CAAiB,IAAjB,CAAJ,EAA4B;AACxB,eAAO,uBAAa,GAAb,CAAiB,IAAjB,MAA2B,KAA3B,CADiB;KAA5B;AAGA,WAAO,YAAY,IAAZ,CAAP,CAJwB;CAA5B;;AAOA,IAAM;;;;;;;;;;;;;;;;;;8DAAsB,iBAAgB,OAAhB,EAAyB,WAAzB,EAAsC,UAAtC;YAOlB,YAKA;;;;;;;;8BAXF,uBAAa,UAAb,OAA8B,OAA9B,IAAyC,uBAAa,GAAb,CAAiB,YAAjB,CAAzC;;;;;yDACO,uBAAa,GAAb,CAAiB,YAAjB;;;;AAGX,+CAAa,KAAb,CAAmB,OAAnB;;;+BAEyB,QAAQ,GAAR,CAAY,CACjC,UAAa,qBAAb,CADiC,EAEjC,eAAe,UAAa,0BAAb,CAAf,EACA,UAAa,oBAAb,CAHiC,CAAZ;;;AAAnB;AAKA,iCAAS,WAAW,CAAX,KAAiB,IAAI,GAAJ,EAAjB;;AACf,mCAAW,KAAX,CAAiB,CAAjB,EAAoB,MAApB,CAA2B,OAA3B,EAAoC,OAApC;;;uEAA4C,sBAAc;;;;;;AACtD,qDAAyB,oCAAzB,oGAAqC;;;wCAA3B,qBAA2B;wCAAtB,uBAAsB;;AACjC,2CAAO,GAAP,CAAW,GAAX,EAAgB,KAAhB,EADiC;iCAArC;;;;;;;;;;;;;;6BADsD;yBAAd,CAA5C;;AAMA,+CAAa,GAAb,CAAiB,YAAjB,EAA+B,MAA/B;yDACO;;;;;;;;KApBiB;;;;;;;sBAAtB;;;;GAAN;;;;;EAuBe,SAAS,UAAT,CAAoB,UAApB,EAAgC;AAC3C,iBAAa,WAAW,OAAX,CAAmB,MAAnB,EAA2B,GAA3B,CAAb,CAD2C;AAE3C;;;;;;;;;;;;sEAAO,kBAAgB,GAAhB;oBAIG,SAMA;;;;;;;;AATN,oCAAI,YAAJ;;;qDAAmB,UAAC,IAAD;2CAAU,kBAAgB,aAAa,IAA7B;iCAAV;AACnB,oCAAI,UAAJ;;;mDAAiB,UAAC,IAAD;2CAAU,eAAa,aAAa,IAA1B;iCAAV;;AAEX,0CAAU,IAAI,UAAJ;;oCAEX;;;;;sCACK,IAAI,KAAJ,CAAU,oBAAV;;;AAGJ,yCAAS,oBAAoB,OAApB,EAA6B,IAAI,WAAJ,EAAiB,UAA9C;;AACf,oCAAI,MAAJ,GAAa,MAAb;AACA,oCAAI,OAAJ,CAAY,MAAZ,GAAqB,MAArB;AACA,oCAAI,OAAJ,CAAY,UAAZ,GAAyB,CAAC,CAAC,OAAO,GAAP,CAAW,YAAX,CAAD;kEACnB;;;;;;;;aAdJ;;;;;;;;;WAAP;MAF2C;CAAhC","file":"index.js","sourcesContent":["/* global fetch */\nimport storedConfig from './storedConfig';\n\nfunction fetchConfig(path) {\n    return fetch(`${path}.json`)\n        .then(res => res.json())\n        .catch(() => false);\n}\n\n/**\n * @param configPath\n * @param name\n * @returns {Promise|Map}\n */\nfunction getConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path);\n    }\n    return fetchConfig(path);\n}\n\n/**\n * @param configPath\n * @param name\n * @returns {Promise|Boolean}\n */\nfunction existsConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path) !== false;\n    }\n    return fetchConfig(path);\n}\n\nconst getOrFetchAppConfig = async function (version, environment, configPath) {\n    if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n        return storedConfig.get('_appConfig');\n    }\n\n    storedConfig.clear(version);\n\n    const jsonConfig = await Promise.all([\n        getConfig(`${configPath}common`),\n        environment && getConfig(`${configPath}environment`),\n        getConfig(`${configPath}local`),\n    ]);\n    const config = jsonConfig[0] || new Map();\n    jsonConfig.slice(1).filter(Boolean).forEach(jsonConfig => {\n        for (let [key, value] of jsonConfig) {\n            config.set(key, value);\n        }\n    });\n\n    storedConfig.set('_appConfig', config);\n    return config;\n};\n\nexport default function ibexConfig(configPath) {\n    configPath = configPath.replace(/\\/*$/, '/');\n    return async function (app) {\n        app.existsConfig = (name) => existsConfig(`${configPath}${name}`);\n        app.loadConfig = (name) => getConfig(`${configPath}${name}`);\n\n        const version = app.appVersion;\n\n        if (!version) {\n            throw new Error('Missing appVersion');\n        }\n\n        const config = getOrFetchAppConfig(version, app.environment, configPath);\n        app.config = config;\n        app.context.config = config;\n        app.context.production = !!config.get('production');\n        return config;\n    };\n}\n"]}